线程状态
    新建状态：new建立的线程对象，直到start()这个线程。
    就绪状态：start()。处于就绪队列，等待jvm调度。
    运行状态：获取CPU资源，执行run()。
    阻塞状态：
        等待阻塞：wait(),进入等待队列。
        同步阻塞：synchronized同步锁失败。
        其他阻塞：sleep、join发出IO请求，时间到后会进入就绪状态。


创建一个线程
    Java 提供了三种创建线程的方法：
    通过实现 Runnable 接口；
    通过继承 Thread 类本身；
    通过 Callable 和 Future 创建线程（有返回值的线程）。
通过Callable和Future创建线程：
    1)创建Callable接口的实现类A，并实现call()方法(call方法作为线程体，且有返回值)。
    2)创建A的实例，使用FutureTask类对象包装Callable对象。
    3)创建Thread线程，使用FutureTask对象作为线程的Target参数,并启动。
    4)调用FutureTask对象的get()方法来获取子线程执行结束后的返回值。


三种方式对比：
    1.采用Runnable、Callable接口方式实现时，只是实现接口，还可以继承其他类。
    2.使用继承Thread方式创建多线程时，编写简单，访问当前线程时无需使用Thread.currentThread()方法，直接使用this即可。


主要概念：
    1.线程同步
    2.线程间通信
    3.线程死锁
    4.线程控制：挂起、停止和恢复

多线程并不是越多越好，太多线程反而会导致程序执行效率降低，因为CPU花费在上下文切换的时间多于执行程序的时间。


































